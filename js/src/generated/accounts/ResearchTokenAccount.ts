/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * Arguments used to create {@link ResearchTokenAccount}
 * @category Accounts
 * @category generated
 */
export type ResearchTokenAccountArgs = {
  address: web3.PublicKey
  paperPubkey: web3.PublicKey
  researcherPubkey: web3.PublicKey
  bump: number
}
/**
 * Holds the data for the {@link ResearchTokenAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ResearchTokenAccount implements ResearchTokenAccountArgs {
  private constructor(
    readonly address: web3.PublicKey,
    readonly paperPubkey: web3.PublicKey,
    readonly researcherPubkey: web3.PublicKey,
    readonly bump: number
  ) {}

  /**
   * Creates a {@link ResearchTokenAccount} instance from the provided args.
   */
  static fromArgs(args: ResearchTokenAccountArgs) {
    return new ResearchTokenAccount(
      args.address,
      args.paperPubkey,
      args.researcherPubkey,
      args.bump
    )
  }

  /**
   * Deserializes the {@link ResearchTokenAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [ResearchTokenAccount, number] {
    return ResearchTokenAccount.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ResearchTokenAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<ResearchTokenAccount> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(
        `Unable to find ResearchTokenAccount account at ${address}`
      )
    }
    return ResearchTokenAccount.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'BdtzNv4J5DSCA52xK6KLyKG5qorajuwfmJV2WivPkRsW'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, researchTokenAccountBeet)
  }

  /**
   * Deserializes the {@link ResearchTokenAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ResearchTokenAccount, number] {
    return researchTokenAccountBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link ResearchTokenAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return researchTokenAccountBeet.serialize(this)
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ResearchTokenAccount}
   */
  static get byteSize() {
    return researchTokenAccountBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ResearchTokenAccount} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      ResearchTokenAccount.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link ResearchTokenAccount} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === ResearchTokenAccount.byteSize
  }

  /**
   * Returns a readable version of {@link ResearchTokenAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      address: this.address.toBase58(),
      paperPubkey: this.paperPubkey.toBase58(),
      researcherPubkey: this.researcherPubkey.toBase58(),
      bump: this.bump,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const researchTokenAccountBeet = new beet.BeetStruct<
  ResearchTokenAccount,
  ResearchTokenAccountArgs
>(
  [
    ['address', beetSolana.publicKey],
    ['paperPubkey', beetSolana.publicKey],
    ['researcherPubkey', beetSolana.publicKey],
    ['bump', beet.u8],
  ],
  ResearchTokenAccount.fromArgs,
  'ResearchTokenAccount'
)
